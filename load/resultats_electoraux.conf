input {
  file {
    path => "C:/elastic/data/resultats_electoraux.csv"
    sincedb_path => "C:/elastic/data/resultats_electoraux.csv.sincedb"
    codec => plain{"charset" => "UTF-8"}
	start_position => "beginning"
  }
}
filter {
  if [message] =~ "libelle du scrutin" {
    drop {}
  }
  fingerprint {
    source => ["message"]
	target => "[@metadata][_id]"
	method => "SHA1"
	key => "1asCft67uk/"
  }
  csv {
    columns => ["libelle_du_scrutin","date_du_scrutin","numero_d_arrondissement","numero_de_bureau_de_vote","numero_de_la_circonscription","code_commune","commune","nombre_d_inscrits","nombre_de_votants","nombre_d_exprimes","numero_de_depot","nom_du_candidat_ou_liste","prenom_du_candidat_ou_liste","nombre_de_voix","nombre_de_blancs","nombre_de_nuls","nombre_de_procurations"]
    separator => ";"
	skip_empty_columns => true
    convert => {"nombre_d_inscrits" => "integer"}
    convert => {"nombre_de_votants" => "integer"}
    convert => {"nombre_d_exprimes" => "integer"}
    convert => {"nombre_de_voix" => "integer"}
    convert => {"nombre_de_blancs" => "integer"}
    convert => {"nombre_de_nuls" => "integer"}
    convert => {"nombre_de_procurations" => "integer"}
  }
  ruby {
	code => "event.set('pourcent_votants',100.0*event.get('nombre_de_votants').to_f/event.get('nombre_d_inscrits').to_f);event.set('pourcent_exprimes',100.0*event.get('nombre_d_exprimes').to_f/event.get('nombre_d_inscrits').to_f);event.set('pourcent_blancs',100.0*event.get('nombre_de_blancs').to_f/event.get('nombre_de_votants').to_f);event.set('pourcent_nuls',100.0*event.get('nombre_de_nuls').to_f/event.get('nombre_de_votants').to_f);event.set('pourcent_procurations',100.0*event.get('nombre_de_procurations').to_f/event.get('nombre_de_votants').to_f);event.set('pourcent_voix',100.0*event.get('nombre_de_voix').to_f/event.get('nombre_de_votants').to_f);event.set('pourcent_abstention',100.0*(event.get('nombre_d_inscrits').to_f-event.get('nombre_de_votants').to_f)/event.get('nombre_d_inscrits').to_f);"
  }
  mutate {
    remove_field => ["@timestamp","path","message","@version","host"]
	add_field => {"[@metadata][_index]" => "resultats_electoraux"}
	add_field => {"[@metadata][_type]" => "resultats_electoraux"}
    convert => {"percent_votants" => "float"}
  }
  elasticsearch {
    hosts => ["http://localhost:9200"]
	index => "bureaux_de_votes"
    query => "identifiant_du_bureau_de_vote:%{numero_d_arrondissement}-%{numero_de_bureau_de_vote}"
    fields => { "location" => "location" }
	enable_sort => false
	periodic_flush => true
  }
}
output {
#  stdout { codec => rubydebug{metadata => true } }
  elasticsearch {
    hosts => ["http://localhost:9200"]
	index => "%{[@metadata][_index]}"
	document_type => "%{[@metadata][_index]}"
	document_id => "%{[@metadata][_id]}"
	manage_template => true
	template => "C:/elastic/data/resultats_electoraux.tmpl"
	template_name => "resultats-electoraux"
	template_overwrite => true
  }
}